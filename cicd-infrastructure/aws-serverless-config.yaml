# AWS ECS/Fargate Infrastructure Configuration
# Spring Boot Application Deployment

apiVersion: v1
kind: ConfigMap
metadata:
  name: aws-infrastructure-config
  namespace: spring-boot-app
data:
  # ECS Configuration
  ecs_cluster_name: "spring-boot-cluster"
  ecs_service_name: "spring-boot-service"
  ecs_task_definition: "spring-boot-task"
  
  # Container Configuration
  container_name: "spring-boot-app"
  container_port: "8080"
  container_memory: "512"
  container_cpu: "256"
  
  # ECR Configuration
  ecr_repository: "spring-boot-app"
  ecr_region: "us-east-1"
  
  # RDS Configuration
  rds_instance_class: "db.t3.micro"
  rds_allocated_storage: "20"
  rds_engine: "postgres"
  rds_engine_version: "13.7"
  
  # VPC Configuration
  vpc_cidr: "10.0.0.0/16"
  public_subnet_1_cidr: "10.0.1.0/24"
  public_subnet_2_cidr: "10.0.2.0/24"
  private_subnet_1_cidr: "10.0.3.0/24"
  private_subnet_2_cidr: "10.0.4.0/24"
  
  # Load Balancer Configuration
  alb_name: "spring-boot-alb"
  alb_port: "80"
  health_check_path: "/actuator/health"
  
  # Auto Scaling Configuration
  min_capacity: "1"
  max_capacity: "10"
  target_cpu_utilization: "70"
  
  # Monitoring Configuration
  cloudwatch_log_group: "/aws/ecs/spring-boot"
  cloudwatch_log_retention: "14"
  
  # Security Configuration
  secrets_manager_arn: "arn:aws:secretsmanager:us-east-1:ACCOUNT:secret:spring-boot"
  
  # Environment Specific Overrides
  dev_min_capacity: "1"
  dev_max_capacity: "2"
  staging_min_capacity: "1"
  staging_max_capacity: "5"
  prod_min_capacity: "2"
  prod_max_capacity: "10"
---
# Terraform Configuration Template
apiVersion: v1
kind: ConfigMap
metadata:
  name: terraform-config
data:
  main.tf: |
    # AWS Provider
    provider "aws" {
      region = var.aws_region
    }
    
    # Variables
    variable "aws_region" {
      description = "AWS region"
      type        = string
      default     = "us-east-1"
    }
    
    variable "environment" {
      description = "Environment name"
      type        = string
    }
    
    variable "app_name" {
      description = "Application name"
      type        = string
      default     = "spring-boot-app"
    }
    
    # VPC
    resource "aws_vpc" "main" {
      cidr_block           = "10.0.0.0/16"
      enable_dns_hostnames = true
      enable_dns_support   = true
      
      tags = {
        Name = "${var.app_name}-${var.environment}-vpc"
        Environment = var.environment
      }
    }
    
    # ECS Cluster
    resource "aws_ecs_cluster" "main" {
      name = "${var.app_name}-${var.environment}-cluster"
      
      setting {
        name  = "containerInsights"
        value = "enabled"
      }
      
      tags = {
        Environment = var.environment
      }
    }
    
    # ECR Repository
    resource "aws_ecr_repository" "app" {
      name                 = var.app_name
      image_tag_mutability = "MUTABLE"
      
      image_scanning_configuration {
        scan_on_push = true
      }
      
      tags = {
        Environment = var.environment
      }
    }
    
    # RDS Instance
    resource "aws_db_instance" "main" {
      identifier             = "${var.app_name}-${var.environment}-db"
      instance_class         = "db.t3.micro"
      allocated_storage      = 20
      storage_type          = "gp2"
      storage_encrypted     = true
      
      engine         = "postgres"
      engine_version = "13.7"
      
      db_name  = "springbootapp"
      username = "dbadmin"
      password = random_password.db_password.result
      
      vpc_security_group_ids = [aws_security_group.rds.id]
      db_subnet_group_name   = aws_db_subnet_group.main.name
      
      backup_window      = "03:00-04:00"
      maintenance_window = "sun:04:00-sun:05:00"
      backup_retention_period = 7
      
      skip_final_snapshot = var.environment != "prod"
      
      tags = {
        Environment = var.environment
      }
    }
    
    # Random password for RDS
    resource "random_password" "db_password" {
      length  = 16
      special = true
    }
    
    # Store password in Secrets Manager
    resource "aws_secretsmanager_secret" "db_password" {
      name = "${var.app_name}-${var.environment}-db-password"
    }
    
    resource "aws_secretsmanager_secret_version" "db_password" {
      secret_id     = aws_secretsmanager_secret.db_password.id
      secret_string = jsonencode({
        username = aws_db_instance.main.username
        password = random_password.db_password.result
        host     = aws_db_instance.main.endpoint
        port     = aws_db_instance.main.port
        dbname   = aws_db_instance.main.db_name
      })
    }